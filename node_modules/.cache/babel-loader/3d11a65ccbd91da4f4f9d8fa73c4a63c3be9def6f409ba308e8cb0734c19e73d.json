{"ast":null,"code":"var _jsxFileName = \"/Users/carlhelin/Library/CloudStorage/OneDrive-UniversitetetiOslo/IN5320/assignment2/in5320-assignment2/src/ContinentSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction transformListToString(inputList) {\n  const continentAbbreviations = {\n    'Africa': 'AF',\n    'Antarctica': 'AN',\n    'Asia': 'AS',\n    'Europe': 'EU',\n    'North America': 'NA',\n    'Oceania': 'OC',\n    'South America': 'SA'\n  };\n  return inputList.filter(continent => continentAbbreviations[continent]).sort().map(continent => continentAbbreviations[continent]);\n}\nconst ContinentSelector = ({\n  onContinentChange\n}) => {\n  _s();\n  const continents = [\"Africa\", \"Asia\", \"Europe\", \"North America\", \"Oceania\", \"South America\"];\n  const [selectedContinents, setSelectedContinents] = useState([]);\n  const handleCheckboxChange = continent => {\n    // Toggle the selected continent\n    if (selectedContinents.includes(continent)) {\n      setSelectedContinents(prevSelected => {\n        const updatedSelected = prevSelected.filter(c => c !== continent);\n        return updatedSelected;\n      });\n    } else {\n      setSelectedContinents(prevSelected => {\n        const updatedSelected = [...prevSelected, continent];\n        return updatedSelected;\n      });\n    }\n  };\n\n  // Call the callback function when checkboxes change\n  const handleSelectionChange = () => {\n    setSelectedContinents(prevSelected => {\n      const transformedList = transformListToString(prevSelected);\n      onContinentChange(transformedList);\n      return prevSelected; // Return the previous state as it is\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Continent Selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), continents.map(continent => /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        value: continent,\n        checked: selectedContinents.includes(continent),\n        onChange: () => {\n          handleCheckboxChange(continent);\n          handleSelectionChange(); // Call the callback here\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), continent]\n    }, continent, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(ContinentSelector, \"eINLi7ZnytvnLxQWgnj4N42WqdI=\");\n_c = ContinentSelector;\nexport default ContinentSelector;\nvar _c;\n$RefreshReg$(_c, \"ContinentSelector\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","transformListToString","inputList","continentAbbreviations","filter","continent","sort","map","ContinentSelector","onContinentChange","_s","continents","selectedContinents","setSelectedContinents","handleCheckboxChange","includes","prevSelected","updatedSelected","c","handleSelectionChange","transformedList","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/carlhelin/Library/CloudStorage/OneDrive-UniversitetetiOslo/IN5320/assignment2/in5320-assignment2/src/ContinentSelector.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction transformListToString(inputList) {\n    const continentAbbreviations = {\n      'Africa': 'AF',\n      'Antarctica': 'AN',\n      'Asia': 'AS',\n      'Europe': 'EU',\n      'North America': 'NA',\n      'Oceania': 'OC',\n      'South America': 'SA'\n    };\n  \n    return inputList\n      .filter(continent => continentAbbreviations[continent])\n      .sort()\n      .map(continent => continentAbbreviations[continent]);\n  }\n\nconst ContinentSelector = ({ onContinentChange }) => {\n  const continents = [\"Africa\", \"Asia\", \"Europe\", \"North America\", \"Oceania\", \"South America\"];\n  const [selectedContinents, setSelectedContinents] = useState([]);\n\n  const handleCheckboxChange = (continent) => {\n    // Toggle the selected continent\n    if (selectedContinents.includes(continent)) {\n      setSelectedContinents(prevSelected => {\n        const updatedSelected = prevSelected.filter(c => c !== continent);\n        return updatedSelected;\n      });\n    } else {\n      setSelectedContinents(prevSelected => {\n        const updatedSelected = [...prevSelected, continent];\n        return updatedSelected;\n      });\n    }\n  };\n\n    // Call the callback function when checkboxes change\n    const handleSelectionChange = () => {\n        setSelectedContinents(prevSelected => {\n          const transformedList = transformListToString(prevSelected);\n          onContinentChange(transformedList);\n          return prevSelected; // Return the previous state as it is\n        });\n      };\n\n  return (\n    <div>\n      <h2>Continent Selector</h2>\n      {continents.map((continent) => (\n        <label key={continent}>\n          <input\n            type=\"checkbox\"\n            value={continent}\n            checked={selectedContinents.includes(continent)}\n            onChange={() => {\n              handleCheckboxChange(continent);\n              handleSelectionChange(); // Call the callback here\n            }}\n          />\n          {continent}\n        </label>\n      ))}\n    </div>\n  );\n};\n\nexport default ContinentSelector;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,qBAAqBA,CAACC,SAAS,EAAE;EACtC,MAAMC,sBAAsB,GAAG;IAC7B,QAAQ,EAAE,IAAI;IACd,YAAY,EAAE,IAAI;IAClB,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,IAAI;IACd,eAAe,EAAE,IAAI;IACrB,SAAS,EAAE,IAAI;IACf,eAAe,EAAE;EACnB,CAAC;EAED,OAAOD,SAAS,CACbE,MAAM,CAACC,SAAS,IAAIF,sBAAsB,CAACE,SAAS,CAAC,CAAC,CACtDC,IAAI,CAAC,CAAC,CACNC,GAAG,CAACF,SAAS,IAAIF,sBAAsB,CAACE,SAAS,CAAC,CAAC;AACxD;AAEF,MAAMG,iBAAiB,GAAGA,CAAC;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,SAAS,EAAE,eAAe,CAAC;EAC5F,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAMgB,oBAAoB,GAAIT,SAAS,IAAK;IAC1C;IACA,IAAIO,kBAAkB,CAACG,QAAQ,CAACV,SAAS,CAAC,EAAE;MAC1CQ,qBAAqB,CAACG,YAAY,IAAI;QACpC,MAAMC,eAAe,GAAGD,YAAY,CAACZ,MAAM,CAACc,CAAC,IAAIA,CAAC,KAAKb,SAAS,CAAC;QACjE,OAAOY,eAAe;MACxB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLJ,qBAAqB,CAACG,YAAY,IAAI;QACpC,MAAMC,eAAe,GAAG,CAAC,GAAGD,YAAY,EAAEX,SAAS,CAAC;QACpD,OAAOY,eAAe;MACxB,CAAC,CAAC;IACJ;EACF,CAAC;;EAEC;EACA,MAAME,qBAAqB,GAAGA,CAAA,KAAM;IAChCN,qBAAqB,CAACG,YAAY,IAAI;MACpC,MAAMI,eAAe,GAAGnB,qBAAqB,CAACe,YAAY,CAAC;MAC3DP,iBAAiB,CAACW,eAAe,CAAC;MAClC,OAAOJ,YAAY,CAAC,CAAC;IACvB,CAAC,CAAC;EACJ,CAAC;;EAEL,oBACEhB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1Bd,UAAU,CAACJ,GAAG,CAAEF,SAAS,iBACxBL,OAAA;MAAAqB,QAAA,gBACErB,OAAA;QACE0B,IAAI,EAAC,UAAU;QACfC,KAAK,EAAEtB,SAAU;QACjBuB,OAAO,EAAEhB,kBAAkB,CAACG,QAAQ,CAACV,SAAS,CAAE;QAChDwB,QAAQ,EAAEA,CAAA,KAAM;UACdf,oBAAoB,CAACT,SAAS,CAAC;UAC/Bc,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC3B;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EACDpB,SAAS;IAAA,GAVAA,SAAS;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWd,CACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACf,EAAA,CA/CIF,iBAAiB;AAAAsB,EAAA,GAAjBtB,iBAAiB;AAiDvB,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}