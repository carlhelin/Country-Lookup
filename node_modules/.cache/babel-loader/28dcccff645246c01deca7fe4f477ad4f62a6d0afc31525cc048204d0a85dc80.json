{"ast":null,"code":"var _jsxFileName = \"/Users/carlhelin/Library/CloudStorage/OneDrive-UniversitetetiOslo/IN5320/assignment2/in5320-assignment2/src/ContinentSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContinentSelector = ({\n  onContinentChange\n}) => {\n  _s();\n  const continents = [\"Africa\", \"Asia\", \"Europe\", \"North America\", \"Oceania\", \"South America\"];\n  const [selectedContinents, setSelectedContinents] = useState([]);\n  const handleCheckboxChange = continent => {\n    // Toggle the selected continent\n    if (selectedContinents.includes(continent)) {\n      setSelectedContinents(selectedContinents.filter(c => c !== continent));\n    } else {\n      setSelectedContinents([...selectedContinents, continent]);\n    }\n  };\n\n  // Notify the parent component (App.js) of the selected continents\n  useEffect(() => {\n    onContinentChange(selectedContinents);\n  }, [selectedContinents, onContinentChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Continent Selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), continents.map(continent => /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        value: continent,\n        checked: selectedContinents.includes(continent),\n        onChange: () => handleCheckboxChange(continent)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), continent]\n    }, continent, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(ContinentSelector, \"vVNATi53+GlzzNuZggCa5qou/Po=\");\n_c = ContinentSelector;\nexport default ContinentSelector;\nvar _c;\n$RefreshReg$(_c, \"ContinentSelector\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ContinentSelector","onContinentChange","_s","continents","selectedContinents","setSelectedContinents","handleCheckboxChange","continent","includes","filter","c","useEffect","children","fileName","_jsxFileName","lineNumber","columnNumber","map","type","value","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/carlhelin/Library/CloudStorage/OneDrive-UniversitetetiOslo/IN5320/assignment2/in5320-assignment2/src/ContinentSelector.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst ContinentSelector = ({ onContinentChange }) => {\n  const continents = [\"Africa\", \"Asia\", \"Europe\", \"North America\", \"Oceania\", \"South America\"];\n  const [selectedContinents, setSelectedContinents] = useState([]);\n\n  const handleCheckboxChange = (continent) => {\n    // Toggle the selected continent\n    if (selectedContinents.includes(continent)) {\n      setSelectedContinents(selectedContinents.filter((c) => c !== continent));\n    } else {\n      setSelectedContinents([...selectedContinents, continent]);\n    }\n  };\n\n  // Notify the parent component (App.js) of the selected continents\n  useEffect(() => {\n    onContinentChange(selectedContinents);\n  }, [selectedContinents, onContinentChange]);\n\n  return (\n    <div>\n      <h2>Continent Selector</h2>\n      {continents.map((continent) => (\n        <label key={continent}>\n          <input\n            type=\"checkbox\"\n            value={continent}\n            checked={selectedContinents.includes(continent)}\n            onChange={() => handleCheckboxChange(continent)}\n          />\n          {continent}\n        </label>\n      ))}\n    </div>\n  );\n};\n\nexport default ContinentSelector;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,SAAS,EAAE,eAAe,CAAC;EAC5F,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAMS,oBAAoB,GAAIC,SAAS,IAAK;IAC1C;IACA,IAAIH,kBAAkB,CAACI,QAAQ,CAACD,SAAS,CAAC,EAAE;MAC1CF,qBAAqB,CAACD,kBAAkB,CAACK,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKH,SAAS,CAAC,CAAC;IAC1E,CAAC,MAAM;MACLF,qBAAqB,CAAC,CAAC,GAAGD,kBAAkB,EAAEG,SAAS,CAAC,CAAC;IAC3D;EACF,CAAC;;EAED;EACAI,SAAS,CAAC,MAAM;IACdV,iBAAiB,CAACG,kBAAkB,CAAC;EACvC,CAAC,EAAE,CAACA,kBAAkB,EAAEH,iBAAiB,CAAC,CAAC;EAE3C,oBACEF,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1Bb,UAAU,CAACc,GAAG,CAAEV,SAAS,iBACxBR,OAAA;MAAAa,QAAA,gBACEb,OAAA;QACEmB,IAAI,EAAC,UAAU;QACfC,KAAK,EAAEZ,SAAU;QACjBa,OAAO,EAAEhB,kBAAkB,CAACI,QAAQ,CAACD,SAAS,CAAE;QAChDc,QAAQ,EAAEA,CAAA,KAAMf,oBAAoB,CAACC,SAAS;MAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,EACDT,SAAS;IAAA,GAPAA,SAAS;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQd,CACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACd,EAAA,CAlCIF,iBAAiB;AAAAsB,EAAA,GAAjBtB,iBAAiB;AAoCvB,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}