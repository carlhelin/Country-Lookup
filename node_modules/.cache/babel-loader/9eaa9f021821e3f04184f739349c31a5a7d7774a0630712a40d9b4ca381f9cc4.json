{"ast":null,"code":"var _jsxFileName = \"/Users/carlhelin/Library/CloudStorage/OneDrive-UniversitetetiOslo/IN5320/assignment2/in5320-assignment2/src/ContinentSelector.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContinentSelector = ({\n  onContinentChange\n}) => {\n  _s();\n  const continents = [\"Africa\", \"Asia\", \"Europe\", \"North America\", \"Oceania\", \"South America\"];\n  const [selectedContinents, setSelectedContinents] = useState([]);\n  const handleCheckboxChange = continent => {\n    // Toggle the selected continent\n    if (selectedContinents.includes(continent)) {\n      setSelectedContinents(prevSelected => prevSelected.filter(c => c !== continent));\n    } else {\n      setSelectedContinents(prevSelected => [...prevSelected, continent]);\n    }\n  };\n\n  // Call the callback function when checkboxes change\n  const handleSelectionChange = () => {\n    const transformedList = transformListToString(selectedContinents);\n    onContinentChange(transformedList);\n\n    // Assuming onContinentChange is asynchronous, you can also update the table here\n    // with the filtered data based on the selected continents\n    // Example: fetchFilteredData(transformedList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Continent Selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), continents.map(continent => /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        value: continent,\n        checked: selectedContinents.includes(continent),\n        onChange: () => {\n          handleCheckboxChange(continent);\n          handleSelectionChange(); // Call the callback here\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), continent]\n    }, continent, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this);\n};\n_s(ContinentSelector, \"eINLi7ZnytvnLxQWgnj4N42WqdI=\");\n_c = ContinentSelector;\nvar _c;\n$RefreshReg$(_c, \"ContinentSelector\");","map":{"version":3,"names":["ContinentSelector","onContinentChange","_s","continents","selectedContinents","setSelectedContinents","useState","handleCheckboxChange","continent","includes","prevSelected","filter","c","handleSelectionChange","transformedList","transformListToString","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","map","type","value","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/carlhelin/Library/CloudStorage/OneDrive-UniversitetetiOslo/IN5320/assignment2/in5320-assignment2/src/ContinentSelector.js"],"sourcesContent":["const ContinentSelector = ({ onContinentChange }) => {\n    const continents = [\"Africa\", \"Asia\", \"Europe\", \"North America\", \"Oceania\", \"South America\"];\n    const [selectedContinents, setSelectedContinents] = useState([]);\n  \n    const handleCheckboxChange = (continent) => {\n      // Toggle the selected continent\n      if (selectedContinents.includes(continent)) {\n        setSelectedContinents(prevSelected => prevSelected.filter(c => c !== continent));\n      } else {\n        setSelectedContinents(prevSelected => [...prevSelected, continent]);\n      }\n    };\n  \n    // Call the callback function when checkboxes change\n    const handleSelectionChange = () => {\n      const transformedList = transformListToString(selectedContinents);\n      onContinentChange(transformedList);\n  \n      // Assuming onContinentChange is asynchronous, you can also update the table here\n      // with the filtered data based on the selected continents\n      // Example: fetchFilteredData(transformedList);\n    };\n  \n    return (\n      <div>\n        <h2>Continent Selector</h2>\n        {continents.map((continent) => (\n          <label key={continent}>\n            <input\n              type=\"checkbox\"\n              value={continent}\n              checked={selectedContinents.includes(continent)}\n              onChange={() => {\n                handleCheckboxChange(continent);\n                handleSelectionChange(); // Call the callback here\n              }}\n            />\n            {continent}\n          </label>\n        ))}\n      </div>\n    );\n  };\n  "],"mappings":";;;AAAA,MAAMA,iBAAiB,GAAGA,CAAC;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,SAAS,EAAE,eAAe,CAAC;EAC5F,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAMC,oBAAoB,GAAIC,SAAS,IAAK;IAC1C;IACA,IAAIJ,kBAAkB,CAACK,QAAQ,CAACD,SAAS,CAAC,EAAE;MAC1CH,qBAAqB,CAACK,YAAY,IAAIA,YAAY,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKJ,SAAS,CAAC,CAAC;IAClF,CAAC,MAAM;MACLH,qBAAqB,CAACK,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEF,SAAS,CAAC,CAAC;IACrE;EACF,CAAC;;EAED;EACA,MAAMK,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMC,eAAe,GAAGC,qBAAqB,CAACX,kBAAkB,CAAC;IACjEH,iBAAiB,CAACa,eAAe,CAAC;;IAElC;IACA;IACA;EACF,CAAC;;EAED,oBACEE,OAAA;IAAAC,QAAA,gBACED,OAAA;MAAAC,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1BlB,UAAU,CAACmB,GAAG,CAAEd,SAAS,iBACxBQ,OAAA;MAAAC,QAAA,gBACED,OAAA;QACEO,IAAI,EAAC,UAAU;QACfC,KAAK,EAAEhB,SAAU;QACjBiB,OAAO,EAAErB,kBAAkB,CAACK,QAAQ,CAACD,SAAS,CAAE;QAChDkB,QAAQ,EAAEA,CAAA,KAAM;UACdnB,oBAAoB,CAACC,SAAS,CAAC;UAC/BK,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC3B;MAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EACDb,SAAS;IAAA,GAVAA,SAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWd,CACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACnB,EAAA,CA1CEF,iBAAiB;AAAA2B,EAAA,GAAjB3B,iBAAiB;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}